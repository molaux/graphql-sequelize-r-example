/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.1.5-dev (node-Sequelize6 dev) on 2021-02-13 20:33:54.
 * Goto
 * https://github.com/mysql-workbench-schema-exporter/mysql-workbench-schema-exporter
 * for more information.
 */

const { DataTypes, Model } = require('sequelize')

class Film extends Model {
}

module.exports = (sequelize, extend) => {
  Film.init(extend({
    filmId: {
      type: DataTypes.SMALLINT,
      field: 'film_id',
      primaryKey: true,
      autoIncrement: true
    },
    title: {
      type: DataTypes.STRING(128),
      field: 'title',
      allowNull: false
    },
    description: {
      type: DataTypes.TEXT,
      field: 'description'
    },
    releaseYear: {
      type: DataTypes.INTEGER,
      field: 'release_year'
    },
    rentalDuration: {
      type: DataTypes.TINYINT,
      field: 'rental_duration',
      allowNull: false,
      defaultValue: '3'
    },
    rentalRate: {
      type: DataTypes.DECIMAL(4, 2),
      field: 'rental_rate',
      allowNull: false,
      defaultValue: '4.99'
    },
    length: {
      type: DataTypes.SMALLINT,
      field: 'length'
    },
    replacementCost: {
      type: DataTypes.DECIMAL(5, 2),
      field: 'replacement_cost',
      allowNull: false,
      defaultValue: '19.99'
    },
    rating: {
      type: DataTypes.ENUM('G', 'PG', 'PG-13', 'R', 'NC-17'),
      field: 'rating',
      defaultValue: 'G'
    },
    specialFeatures: {
      type: DataTypes.STRING,
      field: 'special_features'
    },
    lastUpdate: {
      type: DataTypes.DATE,
      field: 'last_update',
      allowNull: false,
      defaultValue: sequelize.literal('CURRENT_TIMESTAMP')
    }
  }), {
    sequelize: sequelize,
    modelName: 'Film',
    tableName: 'film',
    indexes: [
      {
        name: 'idx_title',
        fields: ['title']
      },
      {
        name: 'idx_fk_language_id',
        fields: ['language_id']
      },
      {
        name: 'idx_fk_original_language_id',
        fields: ['original_language_id']
      }
    ],
    timestamps: false,
    underscored: true,
    syncOnAssociation: false
  })

  Film.associate = () => {
    // 1 <=> N association
    Film.hasMany(sequelize.models.FilmActor, {
      foreignKey: {
        name: 'filmId',
        allowNull: false
      },
      onUpdate: 'CASCADE',
      onDelete: 'RESTRICT',
      tarketKey: 'filmId'
    })

    // 1 <=> N association
    Film.hasMany(sequelize.models.FilmCategory, {
      foreignKey: {
        name: 'filmId',
        allowNull: false
      },
      onUpdate: 'CASCADE',
      onDelete: 'RESTRICT',
      tarketKey: 'filmId'
    })

    // 1 <=> N association
    Film.hasMany(sequelize.models.Inventory, {
      foreignKey: {
        name: 'filmId',
        allowNull: false
      },
      onUpdate: 'CASCADE',
      onDelete: 'RESTRICT',
      tarketKey: 'filmId'
    })

    // N <=> 1 association
    Film.belongsTo(sequelize.models.Language, {
      foreignKey: {
        name: 'languageId',
        allowNull: false
      },
      tarketKey: 'languageId',
      constraints: false
    })

    // N <=> 1 association
    Film.belongsTo(sequelize.models.Language, {
      foreignKey: {
        name: 'originalLanguageId',
        allowNull: true
      },
      tarketKey: 'languageId',
      as: 'Original',
      constraints: false
    })
  }

  return Film
}

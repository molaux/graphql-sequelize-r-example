/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.1.5-dev (node-Sequelize6 dev) on 2021-03-08 17:10:02.
 * Goto
 * https://github.com/mysql-workbench-schema-exporter/mysql-workbench-schema-exporter
 * for more information.
 */

const { DataTypes, Model } = require('sequelize')

class Staff extends Model {
}

module.exports = (sequelize, extend) => {
  Staff.init(extend({
    staffId: {
      type: DataTypes.SMALLINT,
      field: 'staff_id',
      primaryKey: true,
      autoIncrement: true
    },
    firstName: {
      type: DataTypes.STRING(45),
      field: 'first_name',
      allowNull: false
    },
    lastName: {
      type: DataTypes.STRING(45),
      field: 'last_name',
      allowNull: false
    },
    picture: {
      type: DataTypes.BLOB,
      field: 'picture'
    },
    email: {
      type: DataTypes.STRING(50),
      field: 'email'
    },
    active: {
      type: DataTypes.BOOLEAN,
      field: 'active',
      allowNull: false,
      defaultValue: true
    },
    username: {
      type: DataTypes.STRING(16),
      field: 'username',
      allowNull: false
    },
    password: {
      type: DataTypes.STRING(40),
      field: 'password'
    },
    lastUpdate: {
      type: DataTypes.DATE,
      field: 'last_update',
      allowNull: false,
      defaultValue: sequelize.literal('CURRENT_TIMESTAMP')
    }
  }), {
    sequelize: sequelize,
    modelName: 'Staff',
    tableName: 'staff',
    indexes: [
      {
        name: 'idx_fk_staff_store_id',
        fields: ['store_id']
      },
      {
        name: 'idx_fk_staff_address_id',
        fields: ['address_id']
      }
    ],
    timestamps: false,
    underscored: true,
    syncOnAssociation: false
  })

  Staff.associate = () => {
    // 1 <=> N association
    Staff.hasMany(sequelize.models.Payment, {
      foreignKey: {
        name: 'staffId',
        allowNull: false
      },
      onUpdate: 'CASCADE',
      onDelete: 'RESTRICT',
      targetKey: 'staffId',
      as: 'Payments'
    })

    // 1 <=> N association
    Staff.hasMany(sequelize.models.Rental, {
      foreignKey: {
        name: 'staffId',
        allowNull: false
      },
      onUpdate: 'CASCADE',
      onDelete: 'RESTRICT',
      targetKey: 'staffId',
      as: 'Rentals'
    })

    // 1 <=> N association
    Staff.hasMany(sequelize.models.Store, {
      foreignKey: {
        name: 'managerStaffId',
        allowNull: false
      },
      targetKey: 'staffId',
      as: 'ManagerStaffStores',
      constraints: false
    })

    // N <=> 1 association
    Staff.belongsTo(sequelize.models.Address, {
      foreignKey: {
        name: 'addressId',
        allowNull: false
      },
      onUpdate: 'RESTRICT',
      targetKey: 'addressId'
    })

    // N <=> 1 association
    Staff.belongsTo(sequelize.models.Store, {
      foreignKey: {
        name: 'storeId',
        allowNull: false
      },
      targetKey: 'storeId',
      constraints: false
    })
  }

  return Staff
}
